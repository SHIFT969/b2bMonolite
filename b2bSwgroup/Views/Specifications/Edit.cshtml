
@model b2bSwgroup.Models.Specification
@{
    Layout = "~/Views/Shared/_Main.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Редактирование спецификации</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model=>model.ApplicationUserId)
        @Html.HiddenFor(model => model.CustomerId)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, "CustomerId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CustomerId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Zakazchik, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Zakazchik, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Zakazchik, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (User.IsInRole("ComfirmedUser"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Сохранить" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<h4>Позиции по спецификации</h4>
<table class="table">
    @foreach (var position in Model.PositionsSpecification)
    {
        <tr>
            <td>@position.PartNumber</td>
            <td>@position.Name</td>            
            <td>@position.Price</td>
            @*<td>@position.Distributor.Name</td>*@
            <td>@Ajax.ActionLink("Удалить позицию", "DeletePosition", new { idSpec = Model.Id, idPos=position.Id }, new AjaxOptions { OnSuccess = "successDeletePosition", OnFailure = "failAddPosition" })</td>
        </tr>
    }

</table>
<div>
    @Html.ActionLink("Назад к списку", "Index")
</div>
<script>
    function successDeletePosition()
    {
        alert("Позиция удалена");
        location.reload();
    }
    function failAddPosition()
    { alert("Ошибка удаления позиции"); }
</script>
